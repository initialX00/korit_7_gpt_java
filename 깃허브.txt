==============
git이론
==========

git
 - 형상관리, 버전관리, 협업 툴
 작업물 백업 시 데이터저장에 관한 버전관리,
 협업 시 동기화 관리, 협업 시 충돌되는 코드를 관리한다.

 1.작업영역(워크스페이스,워크트리)
  폴더의 단계와 작업물파일을 말한다.

 2.무대(스테이지)
  작업영역에서 저장소로 이동하는 중간 저장공간.
  저장소에 해당 파일에 대한 메세지를 남길 수 있다. git add
  삭제는 저장소가 아니라 무대와 작업영역에서 실행한다. git reset
  삭제했다는 정보를 저장소에 업로드한다.

 3.저장소(로그)
  작업물과 함께 무대에서 받은 메세지를 저장한다.
  git commit -m'___'
  저장소에 업로드된 정보를 확인하는 코드 git status


git hub
 - git의 클라우드

  git에서 hub로 push  (제일처음에는 -u origin main을 붙여준다)
  hub에서 git으로 fetch

  git remote add 주소
  git remote remove 주소

============
git, github 사용
===========

설치 시 use visual studio code as git's default editor
git bash 사용
붙여넣기 및 카피는 shift + ins
위아래 방향키로 이전 명령어 불러오기 가능
로그인 및 --global user는 전역설정이라서 자리 바꿀때만 사용
인텔리제이에 .idea/ 추가 idea는 인텔리제이에서 자동으로 생성되기에 다운받을 필요가 없다.
origin/ 은 깃허브를 의미


github에 빈 repository 생성

cd c:/korea-gpt/git_study  //경로설정

git init  //깃 저장소 생성. 해당 경로에 깃폴더가 생성되어 업로드할 정보 저장

git config --global user.name initialX00  //유저네임 등록

git config --global user.name   //유저네임 확인

git config --global user.email rkdlswlsdn@naver.com  //이메일 등록

git config --global user.email  //이메일 확인




git add A.txt  //해당 파일 저장 대기

git add .  //폴더 내 모든 파일 저장 대기

git status   //폴더 내 파일들 저장대기 여부확인, 수정 여부확인

git commit -m "__"   //코멘트 부여해서 깃에 저장

git commit -m " //"쌍따옴표 안 닫고 엔터키 입력시 여러줄 입력 가능.




git remote add origin 주소 //깃과 허브 연결 (깃허브 리포지토리에 해당주소 나와있음) 

git push -u origin main  //깃허브에 main 생성 후 업로드. 최초 업로드 및 로그인.
    로그인 설정)) 자격증명관리 - windows자격증명 - 일반자격증명 - 다른사람거 로그아웃하기
    클론했으면 할 필요없음

git push  //깃에 저장된 자료를 깃허브에 업로드

저장소 삭제는 깃허브 - 세팅 - 제일아래 저장소 삭제




git clone 주소  // 해당주소의 깃허브 폴더 다운로드

git clone 주소 폴더명  //해당폴더명으로 해당주소의 깃허브 폴더 다운로드

git fetch  // 깃허브에 갱신된 정보 받기

git pull  // 깃허브에 갱신된 정보로 수정하기

충돌방지
  fetch pull을 하지 않고 개개인의 폴더로 깃허브에 업로드할 경우 각자의 버전이 달라서 오류가 난다.
  패치를 받고서 최신버전을 통일시켜준 뒤 업로드를 해야한다.
  merge 오류가 뜬다. 해당 파일에 선택해야될 코드가 제시된다. HEAD가 본래 저장위치의 값이다.
  사람이 직접 수정해줘야한다. 비주얼스튜디오에서 가시성있게 보여준다. 수정 후 재업로드한다.




.gitignore 
  - 업로드하지 않을 파일 정하는 방법
    .gitignore 을 생성한다(파일확장명이 없어야한다) 
    해당 파일에 업로드하지 않을 파일명을 기입한다.
  - 깃이그노어를 후 생성할 경우 해당 파일이 깃이그노어를 상관 안하고 업로드한다.
    따라서 해당 파일을 빼고 업로드하여 제거한다.
  - 인텔리제이의 이그노어에 다음을 추가. idea폴더는 자동 생성되기때문에 충돌방지를 위해 필요없다.
	### IntelliJ IDEA ###
	.idea/







=============
깃보조프로그램 - 시각적으로 깃 사용
SourceTree
============
설치 시 체크 풀기

커밋 되돌리기
 브랜치 초기화 시 잔류기록을 남기지 않게하기 위해 항상 hard를 한다.
 만약을 대비해 초기화 이전에 항상 카피본을 남겨놓는다.

푸쉬 되될리기
 되돌릴 위치 더블클릭하여 HEAD 이동
 해당 HEAD에 새 브런치 제작(temp)
 푸시하여 temp 브런치 체크
 깃허브 설정들어가서 디폴트 브런치를 main에서 temp로 변경
 깃허브의 기존 디폴트 브런치인 main 제거
 패치하기 - 리모트에서 제거된 브랜치 정리하기 체크
 되돌리기(변경된게 기존으로 취급) <== 여기부터 놓침.
 재업로드
 깃허브 브런치 디폴트 변경
 



브런치 :: 원본을 복사하여 수정한 개인의 작업물
머지 :: 브런치를 원본에 합치는 것. 작업 영역이 다를 경우 여러개를 병합해도 충돌이 없다.
브런치는 1회용으로만 사용하라.
개인 브런치에서 뻣어가지마라.
원본인 master껄 항상 머지하라





